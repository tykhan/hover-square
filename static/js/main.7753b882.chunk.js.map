{"version":3,"sources":["state/actions.js","components/DialogWindow.jsx","App.js","reportWebVitals.js","state/rootReducer.js","index.js"],"names":["SET_SQUARE_MODES","SET_CURRENT_MODE","ADD_TO_HOVERED","REMOVE_FROM_HOVERED","FINISH_GAME","setSquareModes","modes","type","payload","DialogWindow","isDialogOpen","setIsDialogOpen","handleFinishGame","dialogTitle","dialogContent","Dialog","open","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","onClick","color","Typography","App","dispatch","useDispatch","useSelector","state","squareModes","currentMode","hoveredSquares","useState","gameStarted","setGameStarted","isDialogFinishOpen","setIsDialogFinishOpen","isDialogVictoryOpen","setIsDialogVictoryOpen","blockRef","useRef","useEffect","a","fetch","response","json","console","error","handleMouseEnter","e","hoveredDiv","_targetInst","pendingProps","value","includes","target","style","backgroundColor","checkIfAllSquareHovered","hanldeModeSelect","mode","squaresList","current","querySelectorAll","forEach","square","useCallback","areHovered","percentsOfHovered","length","toFixed","Box","className","width","Select","displayEmpty","onChange","MenuItem","defaultValue","Object","entries","map","field","variant","prevState","disabled","marginLeft","array","Array","from","fill","marginTop","ref","rowEl","rowIndex","height","border","display","_","colIndex","onMouseEnter","generateSquares","padding","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","store","createStore","action","actionTypes","filter","el","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7753b882.chunk.js","sourcesContent":["export const GET_SQUARE_MODES = 'GET_SQUARE_MODES'\nexport const SET_SQUARE_MODES = 'SET_SQUARE_MODES'\nexport const SET_CURRENT_MODE = 'SET_CURRENT_MODE'\nexport const ADD_TO_HOVERED = 'ADD_TO_HOVERED'\nexport const REMOVE_FROM_HOVERED = 'REMOVE_FROM_HOVERED'\nexport const FINISH_GAME = 'FINISH_GAME'\n\nexport const fetchSquareModes = () => {\n  return async(dispatch) => {\n    try {\n      const response = await fetch('http://demo1030918.mockable.io');\n      const modes = await response.json();\n      dispatch(setSquareModes(modes))\n    } catch (error) {\n      console.error('Error while loading presets')\n    }\n  }\n}\n\nexport const setSquareModes = modes => ({\n  type: SET_SQUARE_MODES,\n  payload: modes,\n})\n\nexport const setCurrentMode = mode => ({\n  type: SET_CURRENT_MODE,\n  payload: mode,\n})\n\nexport const finishGame = () => ({\n  type: FINISH_GAME,\n})\n\nexport const addToHovered = squareInfo => ({\n  type: ADD_TO_HOVERED,\n  payload: squareInfo,\n})\n\nexport const removeFromHovered = id => ({\n  type: REMOVE_FROM_HOVERED,\n  payload: id,\n})","import React from 'react'\n\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  DialogContentText,\n  Typography\n} from '@material-ui/core';\n\nexport const DialogWindow = ({\n  isDialogOpen,\n  setIsDialogOpen,\n  handleFinishGame,\n  dialogTitle,\n  dialogContent,\n}) => {\n\n  return (\n    <Dialog\n      open={isDialogOpen}\n      keepMounted\n      onClose={() => setIsDialogOpen(false)}\n      aria-labelledby=\"alert-dialog-slide-title\"\n      aria-describedby=\"alert-dialog-slide-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {dialogContent}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-slide-description\">\n          {dialogTitle}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={() => setIsDialogOpen(false)} color=\"primary\">\n          <Typography>Continue</Typography>\n        </Button>\n        <Button\n          onClick={() => {\n            handleFinishGame()\n            setIsDialogOpen(false)\n          }}\n          color=\"secondary\"\n        >\n          <Typography>Finish</Typography>\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","import { useState, useEffect, useRef, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  Select,\n  MenuItem,\n  Box,\n  Typography,\n  Button,\n} from '@material-ui/core'\n\nimport './App.css';\nimport * as actions from './state/actions';\nimport { DialogWindow } from './components/DialogWindow'\n\nfunction App() {\n  const dispatch = useDispatch();\n  const modes = useSelector(state => state.squareModes)\n  const currentMode = useSelector(state => state.currentMode)\n  const hoveredSquares = useSelector(state => state.hoveredSquares)\n  const [gameStarted, setGameStarted] = useState(false)\n  const [isDialogFinishOpen, setIsDialogFinishOpen] = useState(false)\n  const [isDialogVictoryOpen, setIsDialogVictoryOpen] = useState(false)\n  const blockRef = useRef(null);\n\n  useEffect(() => {\n    dispatch(actions.fetchSquareModes())\n  }, [dispatch])\n\n  const handleMouseEnter = (e) => {\n    const hoveredDiv = e._targetInst.pendingProps.value;\n\n    if (hoveredSquares.includes(hoveredDiv)) {\n      dispatch(actions.removeFromHovered(hoveredDiv))\n      e.target.style.backgroundColor = 'white';\n    } else {\n      dispatch(actions.addToHovered(hoveredDiv))\n      e.target.style.backgroundColor = 'blue';\n    }\n\n    if (checkIfAllSquareHovered()) {\n      setIsDialogVictoryOpen(true)\n    }\n  }\n\n  const handleStartFinish = () => {\n    if (gameStarted) {\n      setIsDialogFinishOpen(true)\n    } else {\n      setGameStarted(prevState => !prevState)\n    }\n  }\n\n  const hanldeModeSelect = e => {\n    dispatch(actions.setCurrentMode(e.target.value))\n    let squaresList = blockRef?.current?.querySelectorAll('div')\n    if (squaresList) {\n      let squaresArray = [...squaresList]\n      squaresArray.forEach(square => square.style.backgroundColor = 'white')\n    }\n  }\n\n  const checkIfAllSquareHovered = useCallback(\n    () => {\n      let areHovered = true\n      let squaresList = blockRef?.current?.querySelectorAll('#block')\n\n      if (squaresList) {\n        [...squaresList].forEach(square => {\n          if (square.style.backgroundColor !== 'blue') {\n            areHovered = false\n            return\n          }\n        })\n      }\n      \n      return areHovered;\n    },\n    [],\n  )\n\n  const handleFinishGame = () => {\n    setIsDialogFinishOpen(false)\n    setGameStarted(false)\n    dispatch(actions.finishGame())\n  }\n  const percentsOfHovered = ((100 / (currentMode * currentMode)) * hoveredSquares.length).toFixed(1)\n\n  const generateSquares = () => {\n    if (!currentMode || currentMode === 0) {\n      return\n    }\n    const array = Array.from(Array(currentMode), () => Array(currentMode).fill(currentMode))\n\n    return (\n      <Box style={{ marginTop: 20 }} ref={blockRef}>\n        {array.map((rowEl, rowIndex) => {\n          return (\n            <Box\n              \n              style={{ height: 50, width: 'fit-content', border: '1px solid black', display: 'flex' }}\n              key={rowIndex}\n            >\n              {rowEl.map((_, colIndex) => {\n                return (\n                  <Box\n                    id=\"block\"\n                    value={`row ${rowIndex + 1} col ${colIndex + 1}`}\n                    style={{ width: 50, height: 50, border: '1px solid black' }}\n                    onMouseEnter={e => handleMouseEnter(e)}\n                    key={colIndex}\n                  ></Box>\n                )\n              })}\n            </Box>\n          )\n        })}\n      </Box>\n    )\n  }\n\n  return (\n    <Box className=\"App\" >\n      <Box style={{ width: 'fit-content' }}>\n        <Box>\n          <Select\n            displayEmpty\n            onChange={(e) => hanldeModeSelect(e)}\n            value={currentMode}\n            style={{ width: 150 }}\n          >\n            <MenuItem value={0} defaultValue>Pick mode...</MenuItem>\n            {Object.entries(modes).map(mode => {\n              return (\n                <MenuItem\n                  key={mode[0]}\n                  value={mode[1].field}\n                >\n                  {mode[0]}\n                </MenuItem>\n              )\n            })}\n          </Select>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleStartFinish}\n            disabled={currentMode === 0}\n            style={{ marginLeft: 20 }}\n          >\n            {(!gameStarted || currentMode === 0) ? 'START' : 'FINISH'}\n          </Button>\n        </Box>\n        {gameStarted && generateSquares()}\n      </Box>\n      <Box style={{ padding: 50 }}>\n        {!!hoveredSquares.length && <Typography>Hovered squares:</Typography>}\n        {hoveredSquares.map(square => (\n          <Typography key={square}>{square}</Typography>\n        ))}\n      </Box>\n      <DialogWindow\n        isDialogOpen={isDialogVictoryOpen ? isDialogVictoryOpen : isDialogFinishOpen}\n        setIsDialogOpen={isDialogVictoryOpen ? setIsDialogVictoryOpen : setIsDialogFinishOpen}\n        handleFinishGame={handleFinishGame}\n        dialogContent={isDialogVictoryOpen ? \"Victoryyy...You hovered 100% of squares!\" : `You hovered ${hoveredSquares.length} (${percentsOfHovered})% squares`}\n        dialogTitle={isDialogVictoryOpen ? \"Do you want to finish this game?\" : \"Do you really want to finish?\"}\n      />\n    </Box>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nimport { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunk from 'redux-thunk'\nimport * as actionTypes from './actions';\n\nconst initialState = {\n  squareModes: {},\n  currentMode: 0,\n  hoveredSquares: [],\n}\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_SQUARE_MODES:\n      return { ...state, squareModes: action.payload }\n    \n    case actionTypes.SET_CURRENT_MODE:\n      return { ...state, currentMode: +action.payload, hoveredSquares: [] }\n\n    case actionTypes.FINISH_GAME:\n      return { ...state, currentMode: 0, hoveredSquares: [] }\n    \n    case actionTypes.ADD_TO_HOVERED:\n      return {\n        ...state,\n        hoveredSquares: [ ...state.hoveredSquares, action.payload ]\n      }\n    \n    case actionTypes.REMOVE_FROM_HOVERED:\n      return {\n        ...state,\n        hoveredSquares: state.hoveredSquares.filter(el => el !== action.payload)\n      }\n      \n    default:\n      return state;\n  }\n}\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './state/rootReducer';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}