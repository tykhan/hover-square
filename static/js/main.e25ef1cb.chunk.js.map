{"version":3,"sources":["state/actions.js","components/DialogWindow.jsx","components/HoveredSquares.jsx","components/Square.jsx","App.js","state/rootReducer.js","index.js"],"names":["SET_SQUARE_MODES","SET_CURRENT_MODE","ADD_TO_HOVERED","REMOVE_FROM_HOVERED","FINISH_GAME","setSquareModes","modes","type","payload","DialogWindow","isDialogOpen","setIsDialogOpen","handleFinishGame","dialogTitle","dialogContent","Dialog","open","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","onClick","color","Typography","HoveredSquares","hoveredSquares","Box","style","padding","length","map","square","Square","rowIndex","colIndex","handleMouseEnter","value","width","height","border","onMouseEnter","e","App","dispatch","useDispatch","useSelector","state","squareModes","currentMode","useState","gameStarted","setGameStarted","isDialogFinishOpen","setIsDialogFinishOpen","isDialogVictoryOpen","setIsDialogVictoryOpen","blockRef","useRef","useEffect","a","fetch","response","json","console","error","field","hoveredDiv","_targetInst","pendingProps","includes","target","backgroundColor","checkIfAllSquareHovered","hanldeModeSelect","mode","squaresList","current","querySelectorAll","forEach","useCallback","areHovered","percentsOfHovered","toFixed","className","Select","displayEmpty","onChange","MenuItem","defaultValue","Object","entries","variant","prevState","disabled","marginLeft","array","Array","from","fill","marginTop","ref","rowEl","display","_","generateSquares","initialState","store","createStore","action","actionTypes","filter","el","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e25ef1cb.chunk.js","sourcesContent":["export const GET_SQUARE_MODES = 'GET_SQUARE_MODES'\nexport const SET_SQUARE_MODES = 'SET_SQUARE_MODES'\nexport const SET_CURRENT_MODE = 'SET_CURRENT_MODE'\nexport const ADD_TO_HOVERED = 'ADD_TO_HOVERED'\nexport const REMOVE_FROM_HOVERED = 'REMOVE_FROM_HOVERED'\nexport const FINISH_GAME = 'FINISH_GAME'\n\nexport const fetchSquareModes = () => {\n  return async(dispatch) => {\n    try {\n      const response = await fetch('https://demo1030918.mockable.io');\n      const modes = await response.json();\n      dispatch(setSquareModes(modes))\n    } catch (error) {\n      console.error('Error while loading presets!');\n      dispatch(setSquareModes({\n        '3x3': {field: 3},\n        '6x6': {field: 6},\n        '9x9': {field: 9},\n      }))\n    }\n  }\n}\n\nexport const setSquareModes = modes => ({\n  type: SET_SQUARE_MODES,\n  payload: modes,\n})\n\nexport const setCurrentMode = mode => ({\n  type: SET_CURRENT_MODE,\n  payload: mode,\n})\n\nexport const finishGame = () => ({\n  type: FINISH_GAME,\n})\n\nexport const addToHovered = squareInfo => ({\n  type: ADD_TO_HOVERED,\n  payload: squareInfo,\n})\n\nexport const removeFromHovered = id => ({\n  type: REMOVE_FROM_HOVERED,\n  payload: id,\n})","import React from 'react'\n\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  DialogContentText,\n  Typography\n} from '@material-ui/core';\n\nexport const DialogWindow = ({\n  isDialogOpen,\n  setIsDialogOpen,\n  handleFinishGame,\n  dialogTitle,\n  dialogContent,\n}) => {\n\n  return (\n    <Dialog\n      open={isDialogOpen}\n      keepMounted\n      onClose={() => setIsDialogOpen(false)}\n      aria-labelledby=\"alert-dialog-slide-title\"\n      aria-describedby=\"alert-dialog-slide-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        {dialogContent}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-slide-description\">\n          {dialogTitle}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={() => setIsDialogOpen(false)} color=\"primary\">\n          <Typography>Continue</Typography>\n        </Button>\n        <Button\n          onClick={() => {\n            handleFinishGame()\n            setIsDialogOpen(false)\n          }}\n          color=\"secondary\"\n        >\n          <Typography>Finish</Typography>\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","import React from 'react'\n\nimport { Box, Typography } from '@material-ui/core'\n\nexport const HoveredSquares = ({ hoveredSquares }) => {\n  return (\n    <Box style={{ padding: 50 }}>\n      {!!hoveredSquares.length && <Typography>Hovered squares:</Typography>}\n      {hoveredSquares.map(square => (\n        <Typography key={square}>{square}</Typography>\n      ))}\n    </Box>\n  )\n}\n","import React from 'react'\n\nimport { Box } from '@material-ui/core'\nexport const Square = ({ rowIndex, colIndex, handleMouseEnter}) => {\n  return (\n    <Box\n      id=\"block\"\n      value={`row ${rowIndex + 1} col ${colIndex + 1}`}\n      style={{ width: 50, height: 50, border: '1px solid black' }}\n      onMouseEnter={e => handleMouseEnter(e)}\n      key={colIndex}\n    />\n  )\n}\n","import { useState, useEffect, useRef, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  Select,\n  MenuItem,\n  Box,\n  Button,\n} from '@material-ui/core'\n\nimport './App.css';\nimport * as actions from './state/actions';\nimport { DialogWindow } from './components/DialogWindow'\nimport { HoveredSquares } from './components/HoveredSquares'\nimport { Square } from './components/Square'\n\nfunction App() {\n  const dispatch = useDispatch();\n  const modes = useSelector(state => state.squareModes)\n  const currentMode = useSelector(state => state.currentMode)\n  const hoveredSquares = useSelector(state => state.hoveredSquares)\n  const [gameStarted, setGameStarted] = useState(false)\n  const [isDialogFinishOpen, setIsDialogFinishOpen] = useState(false)\n  const [isDialogVictoryOpen, setIsDialogVictoryOpen] = useState(false)\n  const blockRef = useRef(null);\n\n  useEffect(() => {\n    dispatch(actions.fetchSquareModes())\n  }, [dispatch])\n\n  const handleMouseEnter = (e) => {\n    const hoveredDiv = e._targetInst.pendingProps.value;\n\n    if (hoveredSquares.includes(hoveredDiv)) {\n      dispatch(actions.removeFromHovered(hoveredDiv))\n      e.target.style.backgroundColor = 'white';\n    } else {\n      dispatch(actions.addToHovered(hoveredDiv))\n      e.target.style.backgroundColor = 'blue';\n    }\n\n    if (checkIfAllSquareHovered()) {\n      setIsDialogVictoryOpen(true)\n    }\n  }\n\n  const handleStartFinish = () => {\n    if (gameStarted) {\n      setIsDialogFinishOpen(true)\n    } else {\n      setGameStarted(prevState => !prevState)\n    }\n  }\n\n  const hanldeModeSelect = e => {\n    dispatch(actions.setCurrentMode(e.target.value))\n    let squaresList = blockRef?.current?.querySelectorAll('div')\n    if (squaresList) {\n      let squaresArray = [...squaresList]\n      squaresArray.forEach(square => square.style.backgroundColor = 'white')\n    }\n  }\n\n  const checkIfAllSquareHovered = useCallback(\n    () => {\n      let areHovered = true\n      let squaresList = blockRef?.current?.querySelectorAll('#block')\n\n      if (squaresList) {\n        [...squaresList].forEach(square => {\n          if (square.style.backgroundColor !== 'blue') {\n            areHovered = false\n            return\n          }\n        })\n      }\n      \n      return areHovered;\n    },\n    [],\n  )\n\n  const handleFinishGame = () => {\n    setIsDialogFinishOpen(false)\n    setGameStarted(false)\n    dispatch(actions.finishGame())\n  }\n  const percentsOfHovered = ((100 / (currentMode * currentMode)) * hoveredSquares.length).toFixed(1)\n\n  const generateSquares = () => {\n    if (!currentMode || currentMode === 0) {\n      return\n    }\n    const array = Array.from(Array(currentMode), () => Array(currentMode).fill(currentMode))\n\n    return (\n      <Box style={{ marginTop: 20 }} ref={blockRef}>\n        {array.map((rowEl, rowIndex) => {\n          return (\n            <Box\n              style={{ height: 50, width: 'fit-content', border: '1px solid black', display: 'flex' }}\n              key={rowIndex}\n            >\n              {rowEl.map((_, colIndex) => (\n                  <Square\n                    handleMouseEnter={handleMouseEnter}\n                    colIndex={colIndex}\n                    rowIndex={rowIndex}\n                  />\n                )\n              )}\n            </Box>\n          )\n        })}\n      </Box>\n    )\n  }\n\n  return (\n    <Box className=\"App\" >\n      <Box style={{ width: 'fit-content' }}>\n        <Box>\n          <Select\n            displayEmpty\n            onChange={(e) => hanldeModeSelect(e)}\n            value={currentMode}\n            style={{ width: 150 }}\n          >\n            <MenuItem value={0} defaultValue>Pick mode...</MenuItem>\n            {Object.entries(modes).map(mode => (\n                <MenuItem key={mode[0]} value={mode[1].field}>\n                  {mode[0]}\n                </MenuItem>\n              )\n            )}\n          </Select>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleStartFinish}\n            disabled={currentMode === 0}\n            style={{ marginLeft: 20 }}\n          >\n            {(!gameStarted || currentMode === 0) ? 'START' : 'FINISH'}\n          </Button>\n        </Box>\n        {gameStarted && generateSquares()}\n      </Box>\n      <HoveredSquares hoveredSquares={hoveredSquares}/>\n      <DialogWindow\n        isDialogOpen={isDialogVictoryOpen ? isDialogVictoryOpen : isDialogFinishOpen}\n        setIsDialogOpen={isDialogVictoryOpen ? setIsDialogVictoryOpen : setIsDialogFinishOpen}\n        handleFinishGame={handleFinishGame}\n        dialogContent={isDialogVictoryOpen ? \"Victoryyy...You hovered 100% of squares!\" : `You hovered ${hoveredSquares.length} (${percentsOfHovered})% squares`}\n        dialogTitle={isDialogVictoryOpen ? \"Do you want to finish this game?\" : \"Do you really want to finish?\"}\n      />\n    </Box>\n  );\n}\n\nexport default App;\n","\nimport { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunk from 'redux-thunk'\nimport * as actionTypes from './actions';\n\nconst initialState = {\n  squareModes: {},\n  currentMode: 0,\n  hoveredSquares: [],\n}\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.SET_SQUARE_MODES:\n      return { ...state, squareModes: action.payload }\n    \n    case actionTypes.SET_CURRENT_MODE:\n      return { ...state, currentMode: +action.payload, hoveredSquares: [] }\n\n    case actionTypes.FINISH_GAME:\n      return { ...state, currentMode: 0, hoveredSquares: [] }\n    \n    case actionTypes.ADD_TO_HOVERED:\n      return {\n        ...state,\n        hoveredSquares: [ ...state.hoveredSquares, action.payload ]\n      }\n    \n    case actionTypes.REMOVE_FROM_HOVERED:\n      return {\n        ...state,\n        hoveredSquares: state.hoveredSquares.filter(el => el !== action.payload)\n      }\n      \n    default:\n      return state;\n  }\n}\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport store from './state/rootReducer';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}